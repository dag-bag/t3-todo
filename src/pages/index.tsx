import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";
import {
  Container,
  Grid,
  Loader,
  SimpleGrid,
  Skeleton,
  useMantineTheme,
} from "@mantine/core";

import { api, RouterOutputs } from "~/utils/api";
import React from "react";
import { FloatingLabelInput } from "~/components/Input";
import Topic from "~/components/Table";
import NoteEditor from "~/components/NoteEditor";
import { atom, useAtom, useAtomValue } from "jotai";
import NoteCards from "~/components/NoteCard";
type TopicProps = RouterOutputs["topic"]["getAll"][0];
export const SelectedTopicAtom = atom<TopicProps | null>(null);
const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Note taker App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Content />
    </>
  );
};

export default Home;

const Content: React.FC = () => {
  const { data: session } = useSession();
  const selectedTopic = useAtomValue(SelectedTopicAtom);
  const {
    data,
    refetch: refetchTopics,
    isLoading,
  } = api.topic.getAll.useQuery(
    undefined, // no input
    { enabled: session?.user !== undefined }
  );
  const {
    data: notes,
    refetch: refetchNotes,
    isLoading: isLoadingNotes,
  } = api.note.getALL.useQuery(
    {
      topicId: selectedTopic?.id ?? "",
    },
    { enabled: session?.user !== undefined && selectedTopic !== null }
  );
  const createNote = api.note.create.useMutation({
    onSuccess: (data) => {
      void refetchNotes();
    },
  });

  if (!session) return <div></div>;
  return (
    <>
      <Container my="md">
        <SimpleGrid cols={2}>
          <div>
            {isLoading ? (
              <div>Loading...</div>
            ) : (
              <Topic data={data} refetchTopics={() => void refetchTopics()} />
            )}

            <FloatingLabelInput refetchTopics={() => void refetchTopics()} />
          </div>
          {selectedTopic ? (
            <div>
              {isLoadingNotes ? (
                <Loader />
              ) : (
                <NoteCards
                  noteData={notes}
                  refetchNotes={() => void refetchNotes()}
                />
              )}

              <NoteEditor
                onSave={({ title, content }) => {
                  void createNote.mutate({
                    title,
                    content,
                    topicId: selectedTopic?.id ?? "",
                  });
                }}
              />
            </div>
          ) : null}
        </SimpleGrid>
      </Container>
      <div className="m-auto max-w-7xl"></div>
    </>
  );
};
